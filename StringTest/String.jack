// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    //All the necessary field variables for the string class
    field int max_Length;
    field int length;
    field Array charecters;

    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        //This handles if the length is 0 because if it is it doesn't make an array.
        if(maxLength>0)  //if the length is greater than 0 create an Array of charecters
        {
            let charecters=Array.new(maxLength); // Creating the new array of charecters
        }
        let max_Length=maxLength; //Setting the max length field variable to track the maz length.
        let length=0; //Setting the length of the string to 0 after initalization
        return this; // Returning the instance of the string object
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(charecters==0))  //checking to make sure that the chareters array is not equal to 0
        {    
            do charecters.dispose();  // Calling the array dispose function on the array object that holds the charcters
        }

        do Memory.deAlloc(this); //Deleting the object instance of the string.

        return;  // reutning nothing because of the void function
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;  //returning the field variable of the length of the string
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        //Checking to see if the index is within the current lengt of the string and J is greater than 0
        if((j < length) & (j<0))
        {  
            return characters[j]; //Returning the charecter at the specific part of the string
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        //Checking to see if the index is within the current lengt of the string and J is greater than 0
        if((j < length) & (j<0))
        {  
            let characters[j]=c; //Returning the charecter at the specific part of the string
        }
        return; //Returning nothing because of void method.
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < max_Length) //Checking to make sure the length of the string is less than the max length.
        {
            let characters[length]=c; //setting the string to have the variable c
            let length = length + 1 ; //adding one to the length of the string to track the addition
        }
        return this; //Retruing this instance of the string object
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        //Ensuring that the length of the string is greater than 0  to make sure it doesn;t go below 0.
        if(length > 0){ 
            let length = length - 1; //Subtracting one from the length of the string
        }
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() { 
        var int value; //  A variable to hold the integer value of the string
        var int i; //A varaible to hold the index of the current digit
        var bool negative; // A flag to hold if the value is negative or not.

        if((length > 0 ) & (charecters[0] = 45)){ // Checking to see if it is a negative vale or not by seeing if the first index is the minus sign (-)
            let negative = true; //if so setting the negative boolean to true
            let i = 1;  //Stating i at 1 because the first value is the minus sign (-)
        }
        else{
            let negative = false; // Other wise we are not negative so negative = false
            let i = 0; // starting the index at 0
        }

        while ((i < length) & (charecters[i] > 47) & (characters[i] < 58)){ // Checking to see if the charecters[i] is a digit so using the acii value 48-57 as 0-9
            let value = (value * 10) + (charecters[i] - 48); // Adding the value * 10 as a multiple of 10 based on how many digits there are. And then adding the charecter - 48 to get the right digit 0-9
        }

        if(negative){// Checking to see if the negative flag is set or not
            return -value;// if so returing the negative value
        }
        else{
            return value;// if not returing the regular positive value.
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int value; //Variable to hold the value passsed in as a method.
        var int temp_int; // A temp integer that holds the value as it is being decomposed
        var int mod; //A variable to hold the modulus for the integer decomposition
        var char int_char// A checarecter variable to hold the charecter representation of each digit.
        let length = 0; // Starting the string length as 0.

        if (val < 0)// Checking to see if the integer passed in is negative
        {
            let value = -val; //Making the value positive but storing the negative sign
            do appendChar(45); // Addingthe negative sign in front of the number in the string.
        }
        else{
            let value=val; //storing the value that came in as a variable in the method.as positive.
        }

        while (value > 0){// A while loop that runs until the whole integer passed in has been converted to a string representation.
            let temp_int= value / 10; // Dividing the number by 10
            let mod = value - (tmep_int * 10);// Finding out the modulus 
            let int_char= mod + 48; //Making the charecter representation of the integer to add to the string

            do appendChar(int_char); //Adding the charecter representation of the integer to the string being constructed
            let value = temp_int; // Progressing the value to the next integer
        }

        return; //Returning nothing because the method is void.
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; //key code for the new line charecter.
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; //key code for the backspace charecter.
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34; //returning the value 34 wich is the ASCII decimal value of the double quote.
    }
}
